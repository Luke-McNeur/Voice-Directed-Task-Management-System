{
  "name": "StatusLookup.core",
  "nodes": [
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "206eaae9-17d9-8092-8986-e63bbfcf420a",
          "mode": "list",
          "cachedResultName": "Task Lookup Table",
          "cachedResultUrl": "https://www.notion.so/206eaae917d980928986e63bbfcf420a"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "simple": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Simplify', ``, 'boolean') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1280,
        400
      ],
      "id": "9eabb699-0c74-45a5-8987-182ac6630b8f",
      "name": "Notion",
      "credentials": {
        "notionApi": {
          "id": "Bmt98BNEpJZNKdHB",
          "name": "Notion account - n8n - Neurvana"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0f20519f-8937-42a5-88ee-a8dfd4b9cbfc",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        940,
        180
      ],
      "id": "5eb52e6f-8d69-48cc-8e7a-621b3e76dc3d",
      "name": "Webhook",
      "webhookId": "0f20519f-8937-42a5-88ee-a8dfd4b9cbfc"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e50c0740-016b-4d74-8f60-40a3777caa7e",
              "name": "sessionId",
              "value": "={{ $json.headers.cookie.matchAll(/([^;=\\s]*)=([^;]*)/g).toArray().find(c => c[1] == 'SESSID_VueEngine')?.reduce((acc, v, k) => k == 2 ? decodeURIComponent(v) : acc, '') || (+new Date).toString(36).slice(-5) + Math.random().toString(36).substr(2, 5) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1100,
        180
      ],
      "id": "ba9c7c95-4b91-4dd9-8652-0a0f642f356f",
      "name": "set sessionId"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.vf_actionType }}",
                    "rightValue": "task_lookup",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fa9da67e-822c-4ccf-8419-7e41f53c5f2d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "task_lookup"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "87e6d9ad-d238-4748-a778-af015cba28fa",
                    "leftValue": "={{ $('Webhook').item.json.body.vf_actionType }}",
                    "rightValue": "followup_instruction",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "followup_instuction"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1680,
        180
      ],
      "id": "4d1020d1-bce5-4b67-9d9a-29f0ff2f64ae",
      "name": "Switch"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08SZK50WCX",
          "mode": "list",
          "cachedResultName": "neurvana-prototypes"
        },
        "text": "={{ $json.output.response }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1920,
        280
      ],
      "id": "b14145bc-3a2e-44ff-af21-d025471c9ffe",
      "name": "Slack",
      "webhookId": "1ba732cd-a69e-4c2a-b337-68f7c59687e6",
      "credentials": {
        "slackOAuth2Api": {
          "id": "7uVh3PTmGmseGHJb",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c92cf2f4-c4c2-4222-b25f-9f74efc71ad4",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "fcefa90b-a9d2-4de1-b307-b047ddea26c8",
              "name": "output.response",
              "value": "={{ $json.output.response }}",
              "type": "string"
            },
            {
              "id": "5979c3cc-4b6e-47fd-8ef2-23ff4ec6c10c",
              "name": "output.client",
              "value": "={{ $json.output.client }}",
              "type": "string"
            },
            {
              "id": "2da5e154-7e3b-466e-aa6a-74ab4492d626",
              "name": "output.task",
              "value": "={{ $json.output.task }}",
              "type": "string"
            },
            {
              "id": "5952ac4b-592a-477a-9031-8e3c1b01f48e",
              "name": "output.assigned",
              "value": "={{ $json.output.assigned }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1540,
        180
      ],
      "id": "c0751b48-daa1-4168-853c-c5915d5dce2b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"Neurvana_StatusLookup_Response\": \"{{ $json.output.response.replace(/\\\"/g, '\\\\\\\"') }}\",\n  \"client\": \"{{ $json.output.client }}\",\n  \"task\": \"{{ $json.output.task }}\",\n  \"assigned\": \"{{ $json.output.assigned }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1920,
        120
      ],
      "id": "d66448cf-21c2-4ef3-8684-72f4c3d88124",
      "name": "lookup_sucess"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"return\": \"success\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        2080,
        280
      ],
      "id": "f12feefb-c50b-49cd-8e38-90d37c718378",
      "name": "slack_msg_success"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"response\": \"The status of the 'Client training' task is Complete.\",\n  \"client\": \"Bloom Events\",\n  \"task\": \"Client training\",\n  \"assigned\": \"Alex\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1580,
        400
      ],
      "id": "b4014220-5ae9-4b52-9559-453aa58f1b0c",
      "name": "Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1080,
        400
      ],
      "id": "056c3e5d-66b9-4776-8b5d-fee8a8207021",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "4sYXbHRvWghOasnX",
          "name": "OpenAi account - n8n - Neurvana"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "luke.c.mcneur@gmail.com",
        "subject": "Neurvana Task Instruction Report",
        "message": "=<div style=\"font-family: Arial, sans-serif; font-size: 15px; color: #333;\">\n  <p>Hi Luke,</p>\n\n  <p>The following follow-up message was sent via Slack as part of the current prototype workflow:</p>\n\n  <blockquote style=\"border-left: 4px solid #4CAF50; margin: 16px 0; padding: 12px 16px; background-color: #f9f9f9; color: #555;\">\n    {{ $json.message.text }}\n  </blockquote>\n\n  <p><strong>Recipient:</strong> {{ $('Edit Fields').item.json.output.assigned }}<br>\n     <strong>Task:</strong> {{ $('Edit Fields').item.json.output.task }}<br>\n     <strong>Client:</strong> {{ $('Edit Fields').item.json.output.client }}<br>\n      <strong>Sent:</strong> {{ $json.formatted_timestamp }}</p>\n\n  <p>This message was delivered successfully to the assigned team member. No further action is required at this time.</p>\n\n  <p style=\"margin-top: 24px;\">â€“ Neurvana Prototype System</p>\n</div>\n",
        "options": {
          "appendAttribution": false,
          "senderName": "Neurvana Prototype System"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2480,
        280
      ],
      "id": "c0d9e0fc-59cb-486f-bdcf-f397ca42f708",
      "name": "Gmail",
      "webhookId": "0b68f20c-8698-4060-aece-61f45e21ddfe",
      "credentials": {
        "gmailOAuth2": {
          "id": "aXAtEfweFCIWuQ0y",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rawTs = $json.message_timestamp;\nconst unixSeconds = Math.floor(Number(rawTs)); // Remove microseconds\nconst date = new Date(unixSeconds * 1000);\n\n// Format as Eastern Time\nconst formatted = date.toLocaleString('en-US', {\n  timeZone: 'America/New_York',\n  weekday: 'short',\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: true\n});\n\nreturn [\n  {\n    json: {\n      formatted_timestamp: formatted,\n      ...$json\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        280
      ],
      "id": "8ae44459-b96a-458e-9ea8-92e1339e3c3a",
      "name": "Code"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1180,
        400
      ],
      "id": "9021a631-5936-4753-a9aa-6e76005b3905",
      "name": "Memory"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "4IafyvPR7MzxfEZG",
          "mode": "list",
          "cachedResultName": "Neurvana â€” StatusLookup.archive"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "notion_database_page_id": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notion_database_page_id', ``, 'string') }}"
          },
          "matchingColumns": [
            "notion_database_page_id"
          ],
          "schema": [
            {
              "id": "notion_database_page_id",
              "displayName": "notion_database_page_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1480,
        400
      ],
      "id": "a1c53944-05b7-4888-881f-83ac1d34f379",
      "name": "Archive",
      "disabled": true
    },
    {
      "parameters": {
        "name": "Add_Notion_Task",
        "description": "Call this tool to create a new to-do item in notion. The options for Priority are High, Medium and Low. The options for Work / Personal are Work or Personal. The deadline should be a date. If no information for any of these fields is given then leave it blank. However there must be a title supplied.",
        "workflowId": {
          "__rl": true,
          "value": "OQ4ZCA1cGBmpUAxZ",
          "mode": "list",
          "cachedResultName": "Neurvana â€” StatusLookup.add"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
            "Work / Personal": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Work___Personal', ``, 'string') }}",
            "Priority": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Priority', ``, 'string') }}",
            "Deadline": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Deadline', `Only supply this if there is a deadline mentioned.`, 'string') }}",
            "Client": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Client', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Priority",
              "displayName": "Priority",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Work / Personal",
              "displayName": "Work / Personal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "Deadline",
              "displayName": "Deadline",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Client",
              "displayName": "Client",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        1380,
        400
      ],
      "id": "69b5c4b3-8267-446e-97a2-2c81ac8fa822",
      "name": "Add"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are helpful assistant that can answer the users questions with access to their to do list on Notion. \n\nYou are a helpful assistant that can answer user questions and post follow-up messages based on task data from Notion.\n\nUser message: {{\n  $('Webhook').item.json.body.vf_actionType === 'task_lookup'\n    ? $('Webhook').item.json.body.chatInput\n    : $('Webhook').item.json.body.vf_followupMessage\n}}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a structured assistant that manages and queries tasks from a client task database. Each task includes the fields: client, task, deadline, assignee, notes, status, and priority.\n\nThe type of request is determined by:\n{{ $('Webhook').item.json.body.vf_actionType }}\n\nThis value will either be:\n\n\"task_lookup\" â†’ You must analyze the user's input and return the appropriate task information.\n\n\"followup_instruction\" â†’ You must return a short Slack-style message based on the provided follow-up variables.\n\nYour output should be written to a JSON variable named \"response\".\n\nYour responsibilities include:\n\nSwitch Behavior\nIf vf_actionType is \"task_lookup\":\n\nYou will receive the user query from:\n{{ $('Webhook').item.json.body.chatInput }}\n\nInterpret questions about tasks using actual logic and comparisons.\nEvaluate task fields like deadline, status, priority, and assignee.\nUse fuzzy matching for client or person names.\nYou may also create or archive tasks if the user asks.\n\nWhen returning results, include the Notion fields \"client\", \"task\", and \"assigned\" in the output object so they can be used in a follow-up instruction flow (vf_instructions) only if asked.\n\nIf vf_actionType is \"followup_instruction\":\nYou must write a Slack-ready message directed at the assignee using the following inputs:\n\nYou will receive the user message from:\nvf_followupMessage: the user's message or intent in natural language\n{{ $('Webhook').item.json.body.vf_followupMessage }}\n\nvf_client: the client name related to the task (from the Notion \"client\" field)\n{{ $('Webhook').item.json.body.vf_client }}\n\nvf_task: the task details to reference (from the Notion \"task\" field)\n{{ $('Webhook').item.json.body.vf_task }}\n\nvf_assigned: the name of the person to message (from the Notion \"assigned\" field)\n{{ $('Webhook').item.json.body.vf_assigned }}\n\nYou must interpret the intent of vf_followupMessage and rewrite it as a professional message that includes the assignee's name, the task name, and the client name. \n\nIf needed evaluate other notion task fields like deadline, status, priority for additional details. Do not return the vf_followupMessage as-is. Your response should give clear context and sound appropriate for posting in Slack.\n\nNo Hallucinations\nOnly respond based on the task data provided. If no valid match or information is found, say so clearly.\n\nClarity & Precision\nKeep your language clear, brief, and task-focused. Donâ€™t add commentary.\n\nAssume todayâ€™s date is {{$now}} unless otherwise stated."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1240,
        180
      ],
      "id": "eec4917f-a232-4f7a-9939-6a9d730abefc",
      "name": "ActionRouter Agent"
    }
  ],
  "pinData": {},
  "connections": {
    "Notion": {
      "ai_tool": [
        [
          {
            "node": "ActionRouter Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "set sessionId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set sessionId": {
      "main": [
        [
          {
            "node": "ActionRouter Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "lookup_sucess",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack": {
      "main": [
        [
          {
            "node": "slack_msg_success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "lookup_sucess": {
      "main": [
        [],
        []
      ]
    },
    "Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "ActionRouter Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        [
          {
            "node": "ActionRouter Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "slack_msg_success": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "ActionRouter Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Archive": {
      "ai_tool": [
        [
          {
            "node": "ActionRouter Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add": {
      "ai_tool": [
        [
          {
            "node": "ActionRouter Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "ActionRouter Agent": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "b8ac4754-8609-49d7-bcf0-b64bfee439db",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "536da3f879a4021c2e665004b205ac3248650d186016a9e0b3d1c8661186ceb0"
  },
  "id": "gySdyCbondxZE2Ar",
  "tags": [
    {
      "createdAt": "2025-05-31T18:09:47.786Z",
      "updatedAt": "2025-05-31T18:09:47.786Z",
      "id": "zsU6bVU3rXXbcDgL",
      "name": "YT"
    }
  ]
}